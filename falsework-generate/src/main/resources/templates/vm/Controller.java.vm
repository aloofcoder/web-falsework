package ${package}.${moduleName}.controller;


import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import ${package}.${moduleName}.pojo.entity.${className}Entity;
import ${package}.${moduleName}.util.PageResult;
import ${package}.${moduleName}.util.R;
import ${package}.${moduleName}.service.I${className}Service;
import ${package}.${moduleName}.pojo.dto.${className}PageDTO;
import ${package}.${moduleName}.pojo.vo.${className}DetailVO;
import ${package}.${moduleName}.pojo.dto.${className}DTO;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("/${classname}s")
@Tag(name = "${comments}", description = "${comments}前端控制器")
public class ${className}Controller {

    @Autowired
    private I${className}Service  ${classname}Service;

    @Operation(summary = "分页查询${comments}列表",
            responses = {
                    @ApiResponse(responseCode = "200", content = @Content(schema = @Schema(implementation = ${className}Entity.class)))
            })
    @GetMapping("/page")
    public R find${className}Page(@Valid ${className}PageDTO pageDTO) {
        PageResult page = ${classname}Service.query${className}Page(pageDTO);
        return R.ok().put("data", page);
    }

    @Operation(summary = "查询${comments}详情", parameters = {
            @Parameter(name = "${pk.attrname}", description = "${comments}${pk.attrname}", required = true)
    })
    @GetMapping(value = "/{${pk.attrname}}")
    public R find${className}Detail(@NotBlank(message = "不能为空") @PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
        ${className}DetailVO vo = ${classname}Service.find${className}Detail(${pk.attrname});
        return R.ok().put("data", vo);
    }

    @Operation(summary = "添加${comments}", responses = {
            @ApiResponse(responseCode = "201", description = "添加${comments}返回${pk.attrname}",
                    content = @Content(mediaType = "application/json", schema = @Schema(implementation = ${pk.attrType}.class)))
    })
    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public R create${className}(@Valid @RequestBody ${className}DTO ${classname}DTO) {
        ${classname}Service.create${className}(${classname}DTO);
        return R.ok();
    }

    @Operation(summary = "修改${comments}", parameters = {
            @Parameter(name = "${pk.attrname}", description = "${comments}${pk.attrname}", in = ParameterIn.PATH)
    })
    @PutMapping(value = "/{${pk.attrname}}")
    @ResponseStatus(HttpStatus.OK)
    public R update${className}(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}, @RequestBody ${className}DTO ${classname}DTO) {
        ${classname}Service.update${className}(${pk.attrname}, ${classname}DTO);
        return R.ok();
    }

    @Operation(summary = "批量删除${comments}")
    @DeleteMapping
    @ResponseStatus(HttpStatus.OK)
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s) {
            ${classname}Service.delete${className}s(${pk.attrname}s);
        return R.ok();
    }
}
